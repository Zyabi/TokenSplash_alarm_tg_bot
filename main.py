import os
import logging
import asyncio
from dotenv import load_dotenv
import requests
import json

from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –¥–µ–±–∞–≥—É
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è –∑ .env —Ñ–∞–π–ª—É
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ù–∞–∑–≤–∏ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
SENT_ANNOUNCEMENTS_FILE = 'sent_announcements.json'
CHAT_IDS_FILE = 'chat_ids.json'


# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ñ–∞–π–ª–∞–º–∏ ---

def load_json_file(filename: str) -> set:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ JSON-—Ñ–∞–π–ª—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—Ö —è–∫ –º–Ω–æ–∂–∏–Ω—É (set)."""
    try:
        with open(filename, 'r') as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()


def save_json_file(filename: str, data: set):
    """–ó–±–µ—Ä—ñ–≥–∞—î –º–Ω–æ–∂–∏–Ω—É (set) —É JSON-—Ñ–∞–π–ª."""
    with open(filename, 'w') as f:
        json.dump(list(data), f, indent=4)


# --- –õ–æ–≥—ñ–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ Bybit API ---

def fetch_bybit_announcements() -> list:
    """–û—Ç—Ä–∏–º—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –∞–Ω–æ–Ω—Å–∏ –∑ Bybit API."""
    url = "https://api.bybit.com/v5/announcements/index"
    params = {
        "locale": "en-US",  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ–≥–æ –ø–æ—à—É–∫—É "splash"
        "limit": 20  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∞–Ω–æ–Ω—Å—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    }
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å HTTP-–ø–æ–º–∏–ª–æ–∫
        data = response.json()
        if data.get("retCode") == 0 and data.get("result"):
            return data["result"]["list"]
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ API –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ Bybit: {data.get('retMsg')}")
            return []
    except requests.exceptions.RequestException as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ Bybit API: {e}")
        return []


# --- –§—É–Ω–∫—Ü—ñ—ó —Ç–∞ –∫–æ–º–∞–Ω–¥–∏ Telegram-–±–æ—Ç–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start.
    –ó–±–µ—Ä—ñ–≥–∞—î chat_id –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö —Ä–æ–∑—Å–∏–ª–æ–∫.
    """
    chat_id = update.message.chat_id
    chat_ids = load_json_file(CHAT_IDS_FILE)

    if chat_id not in chat_ids:
        chat_ids.add(chat_id)
        save_json_file(CHAT_IDS_FILE, chat_ids)
        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π —á–∞—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏.\n"
            "–Ø –±—É–¥—É –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –≤–∞—Å –ø—Ä–æ –Ω–æ–≤—ñ Token Splash –Ω–∞ Bybit."
        )
        logger.info(f"–ù–æ–≤–∏–π —á–∞—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ–∑—Å–∏–ª–∫–∏: {chat_id}")
    else:
        await update.message.reply_text("–¶–µ–π —á–∞—Ç –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏.")


async def test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /test.
    –®—É–∫–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–Ω–æ–Ω—Å –ø—Ä–æ Token Splash —ñ –Ω–∞–¥—Å–∏–ª–∞—î –π–æ–≥–æ –≤ —á–∞—Ç.
    """
    await update.message.reply_text("üîé –®—É–∫–∞—é –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–Ω–æ–Ω—Å Token Splash...")

    announcements = fetch_bybit_announcements()
    if not announcements:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–æ–Ω—Å–∏ –∑ Bybit. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    found_splash = None
    # API –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏, —Ç–æ–º—É —à—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ –∂ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
    for ann in announcements:
        title = ann.get('title', '').lower()
        if "splash" in title:
            found_splash = ann
            break  # –ó–Ω–∞–π—à–ª–∏ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π, –≤–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É

    if found_splash:
        message = (
            f"‚úÖ <b>–û—Å—å –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–Ω–∞–π–¥–µ–Ω–∏–π Token Splash (—Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è):</b>\n\n"
            f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {found_splash.get('title')}\n\n"
            f"<b>–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b> {found_splash.get('created_at')}\n\n"
            f"üëá <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–Ω–æ–Ω—Å:</b>\n{found_splash.get('url')}"
        )
        await update.message.reply_text(
            text=message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
    else:
        await update.message.reply_text("üòï –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∂–æ–¥–Ω–æ–≥–æ –∞–Ω–æ–Ω—Å—É –ø—Ä–æ Token Splash —Å–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 20 –Ω–æ–≤–∏–Ω.")


async def check_announcements(context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∞–Ω–æ–Ω—Å–∏ —ñ —Ä–æ–∑—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –∑–∞–≤–¥—è–∫–∏ JobQueue.
    """
    bot: Bot = context.bot
    logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö –∞–Ω–æ–Ω—Å—ñ–≤ Bybit...")

    announcements = fetch_bybit_announcements()
    if not announcements:
        return

    sent_ids = load_json_file(SENT_ANNOUNCEMENTS_FILE)
    chat_ids = load_json_file(CHAT_IDS_FILE)

    if not chat_ids:
        logger.warning("–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
        return

    for ann in reversed(announcements):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥ —Å—Ç–∞—Ä—ñ—à–∏—Ö –¥–æ –Ω–æ–≤—ñ—à–∏—Ö
        ann_id = ann.get('id')
        title = ann.get('title', '').lower()
        url = ann.get('url')

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–æ–≤–∏–π –∞–Ω–æ–Ω—Å —ñ —á–∏ —î –≤ –Ω—å–æ–º—É —Å–ª–æ–≤–æ "splash"
        if ann_id and str(ann_id) not in sent_ids and "splash" in title:
            logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π Token Splash: {ann.get('title')}")

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = (
                f"üî• <b>–ù–æ–≤–∏–π Token Splash –Ω–∞ Bybit!</b> üî•\n\n"
                f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {ann.get('title')}\n\n"
                f"<b>–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó:</b> {ann.get('created_at')}\n\n"
                f"üëá <b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∞–Ω–æ–Ω—Å:</b>\n{url}"
            )

            # –†–æ–∑—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —á–∞—Ç–∏
            for chat_id in list(chat_ids):  # –ö–æ–ø—ñ—é—î–º–æ, —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–¥–∞–ª—è—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏
                try:
                    await bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode=ParseMode.HTML,
                        disable_web_page_preview=True
                    )
                    await asyncio.sleep(0.1)  # –ù–µ–≤–µ–ª–∏–∫–∏–π —Ç–∞–π–º–∞—É—Ç, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏ API Telegram
                except Exception as e:
                    # –Ø–∫—â–æ –±–æ—Ç –±—É–≤ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —á–∞—Ç—É
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç {chat_id}: {e}")
                    if "bot was kicked" in str(e) or "chat not found" in str(e):
                        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç—É {chat_id} –∑—ñ —Å–ø–∏—Å–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏.")
                        chat_ids.remove(chat_id)
                        save_json_file(CHAT_IDS_FILE, chat_ids)

            # –î–æ–¥–∞—î–º–æ ID –∞–Ω–æ–Ω—Å—É –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
            sent_ids.add(str(ann_id))
            save_json_file(SENT_ANNOUNCEMENTS_FILE, sent_ids)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞."""
    if not TELEGRAM_BOT_TOKEN:
        logger.critical("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
        return

    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test))

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–Ω–æ–Ω—Å—ñ–≤
    job_queue = application.job_queue
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω (300 —Å–µ–∫—É–Ω–¥)
    job_queue.run_repeating(check_announcements, interval=300, first=10)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()
